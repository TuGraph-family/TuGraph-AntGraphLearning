package com.alipay.alps.flatv3.filter_exp;

import java.util.ArrayList;
import java.util.Map;
import java.util.Stack;
import java.util.List;

import com.antfin.agl.proto.sampler.ArithmeticOp;
import com.antfin.agl.proto.sampler.CmpExp;
import com.antfin.agl.proto.sampler.CmpOp;
import com.antfin.agl.proto.sampler.Element;
import com.antfin.agl.proto.sampler.VariableSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CompareExpUtil {
    private static final Logger LOG = LoggerFactory.getLogger(CompareExpUtil.class);
    public static <T> boolean checkCategory(T left, List<T> categories, CmpOp cmpOp) {
        if (cmpOp == CmpOp.IN) {
            return categories.contains(left);
        } else if (cmpOp == CmpOp.NOT_IN) {
            return !categories.contains(left);
        }
        return false;
    }
    public static boolean evalCategoryExp(CmpExp cmpExp, Map<VariableSource, Map<String, Element.Number>> inputVariables) throws Exception {
        Element.Variable variableSource = null;
        List<Element> categoryElements = null;
        if (cmpExp.getLhsRPNCount() == 1 && cmpExp.getLhsRPN(0).getSymbolCase() == Element.SymbolCase.VAR) {
            variableSource = cmpExp.getLhsRPN(0).getVar();
            categoryElements = cmpExp.getRhsRPNList();
        } else if (cmpExp.getRhsRPNCount() == 1 && cmpExp.getRhsRPN(0).getSymbolCase() == Element.SymbolCase.VAR) {
            variableSource = cmpExp.getRhsRPN(0).getVar();
            categoryElements = cmpExp.getLhsRPNList();
        } else {
            throw new Exception("category expression should accept only one variable, category expression:{}" + cmpExp);
        }
        Element.Number variable = inputVariables.get(variableSource.getSource()).get(variableSource.getName());
        if (variable.getDataCase() == Element.Number.DataCase.S) {
            List<String> categories = new ArrayList<>();
            for (int i = 0; i < categoryElements.size(); i++) {
                categories.add(categoryElements.get(i).getNum().getS());
            }
            return checkCategory(variable.getS(), categories, cmpExp.getOp());
        } else if (variable.getDataCase() == Element.Number.DataCase.F) {
            List<Float> categories = new ArrayList<>();
            for (int i = 0; i < categoryElements.size(); i++) {
                categories.add(categoryElements.get(i).getNum().getF());
            }
            return checkCategory(variable.getF(), categories, cmpExp.getOp());
        } else {
            List<Long> categories = new ArrayList<>();
            for (int i = 0; i < categoryElements.size(); i++) {
                categories.add(categoryElements.get(i).getNum().getI());
            }
            return checkCategory(variable.getI(), categories, cmpExp.getOp());
        }
    }



}
